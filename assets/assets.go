// Code generated by go-bindata.
// sources:
// schema/1.0.0/seed.manifest.example.json
// schema/1.0.0/seed.manifest.schema.json
// schema/1.0.0/seed.metadata.schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema100SeedManifestExampleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4b\x6f\xdb\x38\x10\xbe\x17\xe8\x7f\x18\x10\x3d\x2d\xfc\x50\xd2\x3a\x07\x9f\xb6\x5b\xbb\x88\x8b\x8d\x1d\xc4\x4e\xf6\xb0\x28\x0c\x56\x1a\xcb\x4c\xc4\xc7\x92\x54\x1d\xaf\xe1\xff\xbe\x20\x2d\x59\x94\x2c\x6f\xda\x6e\xb1\xb9\xc4\xc3\xf9\x38\xf3\xcd\x83\xa3\xd9\xbd\x7e\x05\x40\x0c\x62\xf2\x80\xda\x30\x29\xc8\x10\xc8\x45\x2f\xea\x45\xa4\xe3\x55\x8f\xf2\x0b\x19\x82\x87\x01\x10\x41\x39\x3a\x04\xdf\x76\x9d\xa2\x53\x1c\x3f\xca\x2f\xed\xd7\x01\x88\xa2\xf1\x13\x4d\xf1\xac\xde\x32\x9b\x79\x9b\x37\x5b\x58\x31\x6d\x2c\x84\x96\x13\x34\xb1\x66\xca\x16\x57\xef\x90\x26\x06\xa8\x80\xeb\xd1\xc7\x01\xac\x58\x86\x40\x45\x02\x32\xb7\x2a\xb7\x06\xec\x46\x82\x12\x29\x30\x4e\x53\x34\x1d\xa0\xf0\x61\xfe\xe0\x11\x9c\x0a\xb6\x42\x63\x21\x96\xc2\x52\x26\x98\x48\x21\xc6\x2c\x5b\xc6\x32\x17\xb6\x22\x43\x53\x43\x86\xf0\xe7\x41\x04\x20\xeb\x64\x35\x28\xb5\x2e\x18\x91\x06\x52\x6c\xbe\x06\x92\x77\x0a\x4a\xcb\x18\x8d\x61\x22\x25\x07\xcd\xe7\xd2\x36\xa7\xcc\xbb\x46\x5d\x25\x34\x48\xe9\x27\xb9\x16\x30\x92\x18\x58\x94\x3a\xa5\x82\xfd\x4d\xcb\xe8\xc7\xdd\x58\x6a\x15\x00\x90\x53\x96\x39\xcd\x63\x22\xf1\x57\x7c\xa6\x5c\x65\xd8\x8b\x25\x0f\x30\xb9\xf6\x88\xb5\xb5\x6a\xd8\xef\x6f\x36\x9b\x5e\x3b\x4e\xad\xa5\xf0\x44\xae\xae\xae\xba\x83\xc1\xa0\xfb\xee\xed\xe5\x45\x11\xc3\xbe\x2a\x16\x47\x99\x5b\x32\x84\xb7\x57\x51\x54\x9e\x32\x61\x51\xaf\x68\x8c\xb5\xc0\x62\xc9\x39\x15\x89\x33\xf9\x66\x37\x99\xde\xde\x2f\x96\x1f\x27\xbf\x8f\xf7\xf0\x66\x37\xbb\x5f\x38\x71\x34\xb9\x73\xd2\xc3\xf8\x6e\x3e\x99\x4d\xf7\x61\x2e\x85\xab\x67\x68\x0e\x80\xb8\x72\xd7\xaa\xe3\xfe\x76\xa1\x10\xa4\xb3\x72\x58\x99\x2d\x20\x1a\xff\xca\x99\x46\xc7\xcc\xea\x1c\x9b\x6a\x8e\x09\xa3\x8b\xad\x3a\xf5\x55\x95\xb9\xff\xdc\x75\x9d\xd1\xf5\x02\xa9\x63\x3e\x37\x0d\x2a\xaa\x2d\xa3\x59\xe1\x2e\x54\xee\x2b\x21\xbc\x45\x1e\x8d\x2f\xf8\x77\x04\xfa\x69\x3e\x9b\x9e\x04\x6a\xb7\xca\x43\x8c\xd5\x2c\x6c\xdc\xf6\x3c\x9c\x23\x56\xfe\xdc\x07\x8d\x79\x78\x6f\xff\xa5\x3e\x07\x13\x4b\x77\x67\xa9\x44\x6a\x4e\xd8\x1d\xcb\xe0\xd0\x87\xa4\xab\x96\x20\x78\x9e\x59\xa6\xfc\x04\x69\x2b\xa6\xa2\xd6\xa2\x16\x85\x47\xe7\xed\x97\x9e\x3a\xbe\xcd\x66\x60\xdf\x4a\xb8\xf6\xf0\xdb\xf8\x5a\x7c\xb6\xfd\x36\x54\x1b\x9f\x36\x5c\x50\x9b\x15\xcd\xcc\x4f\xef\x9a\xd3\xd9\x77\x84\x3c\xe1\xb6\x44\x7c\x68\x05\x94\x6d\xe5\x9e\x7d\x8a\xfa\x07\x72\x99\xe4\x9c\x6f\x5f\xb4\xfb\xa3\x39\x69\x69\x58\xee\x02\x69\xf4\x66\x8d\xdc\x91\xda\xcd\xec\x7e\xba\x58\xde\xbe\x5f\x5c\xd7\xfd\xbb\xca\xad\x1d\xa0\x6f\xd7\xd8\x2f\xbe\x22\xa8\xfb\xfe\xb8\x8e\xe4\x32\xf1\xa6\xb4\x0c\x52\x13\x26\xa6\xdd\xf3\x1f\x77\x93\xc5\xf8\x5f\x3d\x6f\x34\xb3\x78\xce\xd9\x26\x74\x56\xfe\xac\xfa\x83\x18\xb4\x96\x89\xf4\x9b\x92\x50\x4c\xe4\x86\x2b\x83\xb1\x46\x7b\x9a\xfd\x97\x43\x1b\xfd\xb6\xbc\x9e\xcd\x17\x3f\xd3\xde\xed\xfb\xf9\xfc\x9c\xbd\xfa\x34\xab\x92\xd1\xf8\x98\x69\x34\x32\xd7\x31\xd6\xe6\x18\x31\x31\xcd\xa8\x6e\x64\x29\x78\x38\x2a\x37\xa4\x03\xe4\x2b\xcd\x72\x77\x70\xd1\x8b\xea\x84\x83\x25\x09\x79\x0d\x19\x5d\xbe\x3b\x0f\x36\x6b\xaa\x31\xb9\xf9\x9e\x2b\x09\x33\x4f\x75\x74\x14\xf5\xa2\x4e\xf1\xf5\xbc\x39\x0c\x46\xe6\xd7\x0d\x6f\xe5\x5c\x1e\x50\x6b\xa9\x6b\x7d\x11\x4e\xf5\xf8\xd0\x60\x17\xe1\xa4\x29\x19\xf8\x9b\x5d\x27\x75\xdd\xf2\x10\x42\x8e\x6b\xdd\xd8\x61\x60\xea\x6e\x84\xfa\xc6\x62\x77\x40\x8d\x82\xc3\x10\x1c\x53\x8b\xa9\xd4\x7e\x2e\x25\xd4\x52\x72\xfa\xc4\x5b\x28\x5f\xbe\x40\xd9\x6e\xe4\xff\x43\xd9\x2d\xb4\x47\xc6\xc5\x56\xe8\xfe\xed\x5f\xbf\xda\xff\x13\x00\x00\xff\xff\x22\x5d\x65\xa8\x81\x0b\x00\x00")

func schema100SeedManifestExampleJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedManifestExampleJson,
		"schema/1.0.0/seed.manifest.example.json",
	)
}

func schema100SeedManifestExampleJson() (*asset, error) {
	bytes, err := schema100SeedManifestExampleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.manifest.example.json", size: 2945, mode: os.FileMode(438), modTime: time.Unix(1529539303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema100SeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\xe3\x36\x10\xbe\x2f\xb0\xff\x81\x50\xf7\x90\x47\x95\x64\x81\x5e\x36\x97\xa2\x3f\xa0\x40\x0f\x45\x0f\x8d\xd5\x62\x2c\x8d\x6d\x7a\x25\x52\xa5\xa8\x16\xde\x26\xff\xbd\xd0\x2b\x96\xc4\xa7\x14\xb9\x69\x37\x0e\x10\xc4\x1e\x0e\xe7\x41\x7e\xf3\x71\x22\xf1\xef\xf7\xef\x08\x09\x3e\x14\xf1\x0e\x33\x08\xee\x49\xb0\x93\x32\xbf\xbf\xbd\xdd\x17\x9c\x85\x8d\xf4\x86\x8b\xed\x6d\x22\x60\x23\xc3\xbb\xef\x6e\x1b\xd9\x37\xc1\xb7\xf5\x44\x79\xc8\xb1\x9a\xc5\xd7\x7b\x8c\x65\x2b\x84\x24\xa1\x92\x72\x06\xe9\x4f\x82\xe7\x28\x24\xc5\x22\xb8\x27\x1b\x48\x0b\x6c\x34\xf2\xbe\xbc\x0e\x81\x90\xa0\x40\x4c\x7e\x41\x51\x50\xce\x8e\xd2\x9e\x8f\x42\x0a\xca\xb6\x8d\x8f\x7a\x20\x07\x29\x51\x54\xca\xc1\x6f\x1f\x57\xab\x9b\xbb\xea\xf7\x43\xd0\x8c\x3f\xb5\x7a\xc1\x9e\xaf\xb5\xe6\xfa\x21\xd7\x03\xce\xb0\x1b\xa7\x9a\xd0\xeb\x01\x06\x19\x0e\x45\x96\xd8\x95\xf8\x1f\x20\xfc\xf2\x43\xf8\x6b\x18\x5d\x77\x09\xf4\x93\xe8\x12\xd1\x2c\xcf\x34\x37\x17\x77\x8f\x0f\x1f\xc3\x4f\xd1\xc3\x5d\xf8\x29\xba\xba\x5c\xad\x6e\x9c\x92\x8b\x70\x28\x78\x6c\xfe\x3c\x07\x5c\x7d\xed\x3e\x5f\x5d\x5e\x28\x06\xec\xfa\x97\x57\x97\xdf\x5f\xac\x56\xd7\x7d\xe9\x75\x65\x64\x20\xa8\xb4\x8c\xeb\x92\x43\xfc\x19\xb6\x78\x5e\x1b\xcd\xda\x48\x2a\x53\x27\x2a\x0d\x73\x13\x2c\x62\x41\x73\xe9\xb1\xa8\x26\xef\xb0\x2d\x8c\x53\x41\x08\x38\x8c\xb6\x83\x4a\xcc\x94\x19\x36\x77\x84\x3c\x19\x7c\x67\x40\x99\x04\xca\x50\x18\x23\x18\x33\x00\xf1\x66\x01\x62\x63\x02\x62\x62\x03\x57\x2a\xc3\x0c\x6a\x6d\x2e\xb6\xc0\xe8\x17\xd0\x6d\xc2\x0c\x73\x98\x01\x4d\x17\xb0\x53\x8a\x25\xac\xe4\x3b\xce\xe6\x2c\xd2\x60\xfb\x87\x7b\x22\xf0\x8f\x92\x0a\x4c\x82\x7b\xf2\xa0\xdb\x11\xfd\x82\xf4\x85\x91\xb1\x92\x32\xe4\xa5\x34\x82\x89\x32\x89\x5b\x14\xa6\x52\x10\x58\xf0\x52\xc4\x2a\x56\xfe\x15\x34\x16\x31\xa4\xa0\x14\x02\x71\x94\x23\xb1\x94\xa4\x33\xf4\xa9\x09\x78\xa4\xd1\xaa\x98\x4a\x6b\x14\x94\x8e\xef\xfb\x8e\xd4\xc3\xf7\xf7\xd1\xe9\x7b\xfc\x19\x43\xb7\xb5\xf1\x27\xa4\xa5\x4f\x28\xac\xcc\xd6\x03\x68\x38\x2d\x53\x96\x97\xf2\xc7\x32\x95\x34\x4f\xa9\x4a\x61\x13\x7d\xa8\x42\x9d\x5b\x4b\xf1\xb4\x0a\xba\x12\x6a\x87\x9a\xa5\x50\x87\xa2\xb1\x48\xf5\xec\xf0\xdb\x81\x77\x3c\x12\xd9\x58\xc1\x50\x85\x55\x91\x8a\x0d\xc4\xe6\x23\xf1\x94\x55\x18\xf3\x2c\x03\x96\x2c\xc0\x9c\x35\x3c\xb4\x15\xe2\xac\xc9\x69\x15\xe9\xac\xc7\x60\x43\x53\x4b\xad\x3a\xd8\x85\x38\x18\xc6\x2b\xa3\x39\x79\x79\x66\xd7\xaa\xd9\x19\x87\xf8\xb3\x0e\x99\xcc\x3c\xc4\xc8\x11\x64\x54\x3a\x3e\xd1\xad\x39\x4f\x11\x98\x35\xbc\x04\x37\x50\xa6\xd5\x41\x27\x45\x89\x33\x62\xca\x30\xa1\xf0\xf3\x21\xb7\x2f\xaa\x1f\x38\x5a\x4d\x07\x44\x46\xf6\xb4\x35\x34\x08\x7e\x4e\x56\x0d\x19\xfb\xe2\x60\xda\x4a\xd7\x20\x9d\x11\x54\x0e\x42\x52\xd0\xf6\x62\x27\x8e\x49\x3f\x60\x0a\xd5\x79\xb4\x90\xe7\x32\xd3\x8f\x2a\xc7\x88\x21\x08\xed\xb9\xb6\x2f\xf4\xcd\x33\x39\x33\x94\x5e\xf5\x6b\x67\xa8\xd6\xd9\x42\xab\x85\xac\xcc\x6c\xb8\xae\x95\x9c\x1c\x47\xbc\x72\x27\xc7\x7f\x34\xec\x5a\x6d\x3b\x68\x57\xb2\xe3\xb5\x55\x72\xb2\xa9\xb6\x36\xc9\x49\x49\xc2\xb1\xb5\x2f\xe4\x10\xa5\x65\x75\x74\x63\xbc\x94\xe7\x76\x6c\xac\xf6\x26\xc9\xee\xb9\xf5\x99\x16\xde\xac\x93\xbf\x8b\xfa\xb4\x7e\xfe\x93\x6d\xcf\xeb\x9d\x29\xaf\xc0\x68\xdd\x4e\x9f\x1b\xa3\xc1\x9c\xff\x3d\x57\x7c\xc6\xc3\xc9\xab\xf7\xdc\xe8\x34\x4a\xa7\x6e\x74\xce\x54\x45\x5e\xab\xf9\xca\x78\xc9\x1c\xbd\xd7\x1b\x7b\xb4\x4d\x96\x7a\xbc\x9d\x83\xdc\xf9\x47\x33\xc1\x70\xc6\x13\x5b\x9a\x2e\x9e\x09\x04\xb7\x80\x50\xfc\x65\x82\xa0\x09\xfa\xc7\x82\xaa\x2c\xbf\xe4\x40\x7d\xc9\x13\xf4\x7a\xb5\xd5\x11\xf5\x01\xba\xa3\x20\x0a\x94\x92\x32\xf5\xc5\x2b\x79\xc3\x25\xb1\x48\x39\x14\x18\x0b\x54\x5e\x00\x6a\x62\x71\x90\xb8\x4f\x03\xbc\x2c\xe0\x66\xa0\xaa\xff\xd5\xf4\x36\x05\x85\xe0\x62\xd9\x17\xfc\x7a\x6c\x4d\xc1\x95\x03\x53\x41\x6c\xe4\x1e\xcb\xab\x5c\x35\xf9\x76\x8a\x19\x9d\x1e\xc8\xf4\x47\xa5\xc6\xb3\xf6\x66\x87\xde\xb5\x87\x35\xcb\x5d\x8f\xd9\x36\x63\x90\xb8\xe5\xc2\xd0\xe5\xfa\xac\x4f\x8f\x98\xf7\x7c\xad\x55\xb1\x9d\x15\xa6\x49\x95\x65\x90\xb0\x04\xd9\xda\xea\xaf\x81\x9a\x01\x33\x43\x69\x64\x2a\xb7\xee\xe3\xd1\xb1\xc1\xa5\x72\xb2\xf4\xaf\x8b\xf5\xc5\xa3\xdb\x52\xc3\x2b\x0e\x15\xa4\xfa\x92\x3e\x2c\x0c\x97\x6b\x74\x77\x24\x3a\x51\x9b\x56\x9d\x45\x93\x81\x26\xfa\xc1\xbd\xbf\xd6\x5a\xbd\x73\xd5\xc7\xe8\xfd\xbb\xa7\x7f\x02\x00\x00\xff\xff\x7c\x42\x67\xe2\xa3\x28\x00\x00")

func schema100SeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedManifestSchemaJson,
		"schema/1.0.0/seed.manifest.schema.json",
	)
}

func schema100SeedManifestSchemaJson() (*asset, error) {
	bytes, err := schema100SeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.manifest.schema.json", size: 10403, mode: os.FileMode(438), modTime: time.Unix(1529539313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema100SeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xe3\x36\x10\xbe\x07\xc8\x3b\x0c\x98\x1c\x9d\xa8\x68\x83\x16\xf5\x2d\x28\x90\xa2\x45\xbb\x09\x36\xc7\xc0\x07\x5a\x1e\xd9\x0c\x28\xd1\x21\x69\x24\xc6\x42\xef\xbe\x20\x25\x4a\xa4\x44\xd9\xf2\x3a\x6b\xf8\x26\x0d\xe7\xf7\xfb\x86\xe4\xf0\xdb\xe5\x05\x00\xb9\x56\xe9\x0a\x73\x4a\xa6\x40\x56\x5a\xaf\xa7\x49\xf2\xaa\x44\x71\x53\x49\x6f\x85\x5c\x26\x0b\x49\x33\x7d\xf3\xcb\x5d\x52\xc9\xae\xc8\xc4\x1a\xb2\x85\xb3\x51\xd3\x24\xd1\x42\x70\x75\xcb\x50\x67\xd6\x66\xa5\x73\x9e\xc8\x2c\xfd\xe3\xcf\xbb\xdf\x9d\x81\x66\x9a\xa3\xb1\xf9\x1b\x05\xfc\xfb\xfc\xf8\x05\xc4\xfc\x15\x53\x5d\x2f\x2f\x50\xa5\x92\xad\x35\x13\x85\x51\x7a\xb6\xc1\x20\x13\x12\x28\xc4\x2d\xf4\x76\x6d\xfd\x05\x42\x89\x6f\x1b\x26\xd1\x24\xf7\x52\xab\xc0\xac\x5a\x5a\x4b\xb1\x46\xa9\x19\x2a\x32\x05\x5b\x3d\x00\x99\xcf\xc5\x87\xf9\x05\x72\x2d\x31\xdb\x01\xc3\x12\x85\x11\x25\xc6\xe0\xd6\x7c\x5d\x11\x28\x8d\x93\xb2\xf2\x2e\x0a\x7c\x34\xf6\x2f\x95\x63\xcf\xe1\x55\xb2\xc0\x8c\x15\xcc\x94\xa6\x8c\x9f\x1c\xb5\xdc\x92\xda\x70\x84\xea\x5f\x82\x73\x4c\x2d\x32\xfb\x8d\x32\xa4\x7a\x23\x71\xbc\x66\xe0\xdd\x98\xcc\x1c\x21\x8d\xaa\x87\x57\x93\x7e\x23\x1a\x60\xc2\x2e\xf8\x6c\x38\xa1\xd3\x9f\x78\x82\x54\x08\xb9\x60\x05\xd5\xa8\x88\x13\xcf\x5a\x37\x1d\x6c\x6d\x55\xed\xa7\xdf\x5b\x4f\x82\x15\xda\x77\x0d\x40\xe8\x62\x61\xcb\xa0\xfc\xc9\xef\x80\x8c\x72\x85\xa1\x66\xac\x43\xc2\xa4\x7b\x62\x00\x82\xc5\x26\x0f\x93\x6b\x96\xaa\x74\xba\x0b\xb3\x50\x50\x4e\x3a\x91\x7c\x34\x62\x01\xe3\x74\xae\x85\xb2\x5f\x9d\x70\xa5\xff\xeb\xfd\xf8\x51\x07\xc0\xfc\x7f\xc3\x35\x3b\x33\x44\xbd\x9c\x4e\x0b\xeb\xbd\x94\x74\xfb\x79\xd8\xfe\xc7\x0a\x7c\xd6\x92\x15\xcb\xf3\xc1\xd6\xcb\xe9\x34\xd8\xf2\xa1\x80\xc7\x36\xed\x39\xa2\xdb\x4d\xec\xb3\x21\x76\x87\x30\xb5\x8d\x3a\xe9\xad\x33\x8d\x79\xd4\xf2\x70\x7a\x3a\x04\x1d\xc5\xd7\x93\xe0\xdb\xa5\x28\xce\x87\x27\x97\xd0\xa9\x8e\x97\x58\xb4\xe3\x0f\xed\x33\x03\x35\xc8\xea\xfc\x3b\x3f\xce\xca\xf8\xb6\x6f\x66\x98\xea\xc3\x55\x44\x22\x13\x5d\x30\x47\x79\x23\x72\x57\xaf\x9d\x86\x3a\x93\xf2\x3d\xa4\x8d\x16\x88\x0c\x5c\x8c\x7a\x58\x56\x03\xe3\x58\x93\x8c\x21\xd9\x1f\xb6\x86\xb8\x6f\x78\x6f\x89\x8e\x26\x0a\xb3\x80\x41\x3f\xcc\xb4\xdb\xb4\xc3\xc4\xb5\xa4\x8d\x18\xa4\x23\xc8\x97\x1d\xe4\xdd\x58\x1c\x85\xfb\xa1\x5e\xdc\x81\x71\xf3\x04\xa9\x1d\xc1\xce\x59\xd7\x9b\x93\x27\x01\xa2\x3f\x0c\xb4\x4b\x71\x00\xdd\x6d\x0f\xdb\xc8\xcc\x0c\xd5\x6b\xc0\xa1\x5e\x6c\x38\x27\xbd\xdd\x76\x18\xde\xc1\xe6\x2d\x77\x1d\x22\x4d\xdc\x97\xf6\x9d\xe0\x72\x98\x75\x4d\xed\xe3\x32\x30\x51\xf5\x6d\x6e\x4c\xf2\x39\x4a\x6b\xb4\x87\xec\x7d\xbb\xec\xa1\xa7\x76\x48\x03\xa4\x31\xb3\xb0\x09\x6a\xd5\xe3\x69\xdf\xb1\xbd\x9a\x18\x9f\xba\xb9\xda\x57\xe4\xfe\xbd\x65\x6a\x72\x6f\x8f\xb0\xa2\x1e\x88\x8a\x15\x4b\x8e\xd0\xa8\x4f\xfa\xe5\xf7\xf3\x25\x39\x2b\xfe\xa9\x13\xfe\x35\x90\xd3\x0f\x27\xff\xcd\x97\xbb\xea\x82\xd6\x1f\xb8\xc5\x5c\x3b\x05\x27\xf9\xe4\xe4\x86\xed\xcf\xcc\xaf\xa4\xbd\xb1\x5d\xa1\xf6\xb2\x6e\x88\xe8\x33\x50\x3d\x53\x76\xd3\x50\x80\xc5\xd8\x5c\x16\xce\x4c\x8d\xa4\x22\x7a\x95\x8e\x7f\x90\x96\x91\xcc\xbd\x29\x73\x74\xda\xfa\x5d\x80\x90\x90\x0b\x89\x03\x25\x50\xce\xfb\xc7\x5f\x97\x91\x43\x5f\x7c\xbb\xf9\xf5\xdb\x74\x88\xdc\x81\xfa\xa9\xfc\x7a\x50\xfd\x99\xd8\xc8\xb6\x70\x78\x5f\xa1\x44\xd0\x2b\x84\x8c\x49\xa5\x01\xdf\x36\x94\x2b\x2b\xe0\x54\xe9\x33\x02\xe6\xee\x00\x60\xdc\x10\x36\x1a\x95\x0a\x49\x30\xad\xf4\x33\xfa\xd9\x23\x6a\xe8\x50\x2c\x2f\x2f\xca\xef\x01\x00\x00\xff\xff\xca\x61\x87\x47\x58\x15\x00\x00")

func schema100SeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedMetadataSchemaJson,
		"schema/1.0.0/seed.metadata.schema.json",
	)
}

func schema100SeedMetadataSchemaJson() (*asset, error) {
	bytes, err := schema100SeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.metadata.schema.json", size: 5464, mode: os.FileMode(438), modTime: time.Unix(1529539251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1.0.0/seed.manifest.example.json": schema100SeedManifestExampleJson,
	"schema/1.0.0/seed.manifest.schema.json": schema100SeedManifestSchemaJson,
	"schema/1.0.0/seed.metadata.schema.json": schema100SeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1.0.0": &bintree{nil, map[string]*bintree{
			"seed.manifest.example.json": &bintree{schema100SeedManifestExampleJson, map[string]*bintree{}},
			"seed.manifest.schema.json": &bintree{schema100SeedManifestSchemaJson, map[string]*bintree{}},
			"seed.metadata.schema.json": &bintree{schema100SeedMetadataSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

