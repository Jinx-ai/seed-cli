// Code generated by go-bindata.
// sources:
// schema/1.0.0/seed.manifest.example.json
// schema/1.0.0/seed.manifest.schema.json
// schema/1.0.0/seed.metadata.schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema100SeedManifestExampleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4b\x6f\xe3\x36\x10\x3e\x37\x40\xfe\xc3\x80\xd8\x53\xe1\x67\x76\x6d\x14\x3e\xb5\x5d\xc7\x88\x8b\x3a\x59\x6c\x9c\x5c\x8a\xc0\x60\xa8\x91\x4c\x47\x24\x55\x92\x8a\xe3\x1a\xfa\xef\x05\x29\x3f\x28\x47\x42\x1d\x14\x58\x5f\x8c\xe1\x7c\xfc\xe6\xe3\x3c\x48\x6d\x2f\x2f\x00\x88\x41\x8c\x1e\x51\x1b\xae\x24\x19\x01\xe9\x77\x7a\x9d\x1e\x69\x79\xd7\x4a\x3d\x93\x11\x78\x18\x00\x91\x54\xa0\x43\x88\x4d\xdb\x39\x5a\xbb\xe5\x95\x7a\xae\xdf\x0e\x40\x32\xca\x5e\x68\x82\x8d\x7e\xcb\x6d\xea\x39\x67\x1b\x88\xb9\x36\x16\x42\xe6\x08\x0d\xd3\x3c\xb3\xbb\xad\xdf\x91\x46\x06\xa8\x84\x9b\xf1\x64\x00\x31\x4f\x11\xa8\x8c\x40\xe5\x36\xcb\xad\x01\xbb\x56\x30\x9f\x4e\x26\xc0\x05\x4d\xd0\xb4\x80\xc2\xd7\xfb\x47\x0f\x11\x54\xf2\x18\x8d\x05\xa6\xa4\xa5\x5c\x72\x99\x00\xc3\x34\x5d\x30\x95\x4b\x7b\x54\x43\x13\x43\x46\xf0\x57\x69\x02\x90\x65\x14\x0f\xf6\x5e\xaf\x36\x8e\x03\x93\x99\xd7\xc0\xf2\x51\x21\xd3\x8a\xa1\x31\x5c\x26\xa4\xf4\x3c\xed\xc9\x05\xe5\x3e\x36\xea\x63\x4a\x83\xa4\xfe\xa1\x96\x12\xc6\x0a\x03\x46\xa5\x13\x2a\xf9\x3f\x74\x7f\xfe\xeb\x36\x53\x3a\x0b\x00\x28\x28\x4f\x9d\x67\x15\x29\xfc\x15\xdf\xa8\xc8\x52\xec\x30\x25\x02\x4c\xae\x3d\x62\x69\x6d\x36\xea\x76\xd7\xeb\x75\xa7\x1e\x97\x2d\x95\xf4\x42\x86\xc3\x61\x7b\x30\x18\xb4\xbf\x7c\xbe\xea\xef\xce\x50\x1c\xcb\x25\x50\xe5\x96\x8c\xe0\xf3\xb0\xd7\xdb\xaf\x72\x69\x51\xc7\x94\x61\xe5\x60\x4c\x09\x41\x65\xe4\x28\x3f\x6d\xa7\xb7\xdf\x1e\xe6\x8b\xc9\xf4\xcf\xeb\x02\x3e\x6d\xef\x1e\xe6\xce\x1c\x4f\xbf\x17\x61\x02\xa5\x2b\x63\xc8\x01\x40\x5c\x95\x2b\x35\x71\xbf\x6d\x68\x04\x39\x3c\x46\x71\xb4\x3f\xed\x3a\x50\x5b\x4e\x5d\x0e\xac\xce\xb1\x75\xb2\x53\xe3\xdf\x39\xd7\x18\x35\xb8\x05\x46\x9c\xce\x37\xd9\x7b\x09\xc7\x92\x77\xdf\xda\xae\x4d\xda\xde\x20\x55\xcc\x53\x68\x16\x47\xe3\xb0\x5e\x04\xd5\x2e\xdb\xf8\xff\x9c\xbf\xa4\x58\xb8\x3d\x0b\xd7\xab\x86\x34\x1e\xc8\xc1\x4b\xf9\xd5\xa6\xde\xe3\xf2\xd4\xf2\xcc\x8f\x66\x5d\x5e\x32\x6a\x2d\x6a\xb9\x8b\xe9\xe2\xfd\xdc\xb1\x3c\xae\x9c\xbe\x68\x7d\x54\x72\x65\x9e\xea\x04\x5b\x7c\xb3\xdd\x3a\x54\x9d\x1e\x87\x6b\x4a\x7f\xb0\x9f\xac\x8c\x9f\xae\xb3\x12\xfc\xfe\xce\x38\x40\x5e\x70\xb3\x47\x7c\xad\x05\xd8\x7d\xd6\xa5\xc5\x04\x75\xa3\xb6\x9a\xd6\x10\x8e\xf0\xa4\x0b\x2a\x12\x0f\x02\x67\x77\x0f\xb7\xf3\xc5\xb7\xdf\xe6\x37\xd5\xf8\x2e\x43\x4b\x07\xe8\xda\x25\x76\x77\xb7\x20\xea\xae\x5f\xae\x22\x85\x8a\x3c\x95\x56\x81\xc4\x83\xc0\x63\xea\x88\x41\x6b\xb9\x4c\xce\xd2\x35\xfe\x7d\x71\x73\x77\x3f\x3f\x09\x65\x90\x69\x74\xb7\x49\x4c\x53\x83\x75\xd1\x4e\xee\x1f\x8d\x46\xe5\x9a\x61\x65\x4a\x88\x61\x34\xa5\xfa\x1c\x19\x2c\xcb\x4f\x66\x82\xbc\xd2\x34\x77\xbe\x7e\x10\xbe\xf5\x5f\x3c\x02\x45\x13\xcd\xd5\x2f\x1f\x21\x32\x4b\xaa\x31\x9a\x35\xd2\xf5\x3e\x42\x16\x71\xf3\xd2\x24\xab\x57\x5d\xf7\x77\xed\xac\x1c\x72\xee\x5f\xa4\x2f\x67\xa4\x1f\xb5\x56\xba\x52\xef\xf0\xaa\x62\x65\xe3\xf4\xc3\xe1\x3a\xbc\xef\xd7\x6e\x2b\xdc\x3a\xa5\xa1\xff\xe4\x85\x2f\x51\xe3\x60\x31\x04\x33\x6a\x31\x51\xda\xcf\x59\x44\x2d\x25\xef\x47\xa5\x46\xcf\xd5\x0f\xd1\xe3\x3e\x5b\x0e\x72\x76\x2f\xbf\xfb\x2b\x2e\x2f\x8a\xcb\x8b\x7f\x03\x00\x00\xff\xff\x63\x28\x40\x4b\x69\x09\x00\x00")

func schema100SeedManifestExampleJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedManifestExampleJson,
		"schema/1.0.0/seed.manifest.example.json",
	)
}

func schema100SeedManifestExampleJson() (*asset, error) {
	bytes, err := schema100SeedManifestExampleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.manifest.example.json", size: 2409, mode: os.FileMode(438), modTime: time.Unix(1523455155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema100SeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcb\x6e\xeb\x36\x10\xdd\xeb\x2b\x08\xf5\x2e\xec\xa4\x8a\x1d\xa0\x9b\x78\x53\xe4\x03\x0a\x74\x51\x74\x11\xdb\x2d\xc6\xd2\xd8\xa6\x23\x91\x2a\x45\xb5\x70\x1a\xff\x7b\xa1\x87\x13\x99\xe2\x43\xf2\x23\x4d\x1b\x5f\xe0\xe2\x1a\xa3\xe1\xcc\x21\x79\xe6\x70\xae\xc4\xbf\x3d\x42\xfc\x6f\x59\xb8\xc6\x04\xfc\x09\xf1\xd7\x52\xa6\x93\xd1\x68\x93\x71\x16\x54\xd6\x3b\x2e\x56\xa3\x48\xc0\x52\x06\xe3\x1f\x46\x95\xed\x3b\xff\xfb\x62\x9c\xdc\xa6\x58\x0c\xe2\x8b\x0d\x86\xb2\xb2\x41\x14\x51\x49\x39\x83\xf8\x67\xc1\x53\x14\x92\x62\xe6\x4f\xc8\x12\xe2\x0c\x4b\x87\xb4\x69\x2e\xd2\x13\xe2\x67\x88\xd1\xaf\x28\x32\xca\xd9\x9b\xb1\x11\x3f\x93\x82\xb2\x55\x19\xbf\xb4\xa7\x20\x25\x8a\xc2\xd5\xff\xed\x7e\x36\xbb\x1b\x17\x7f\xbf\xf9\xe5\xe3\x5d\xe5\xe5\x6f\xf8\x42\x17\xaa\x01\xb5\xb4\xbb\xe0\x56\xf9\xda\x90\x4b\x3b\x83\x04\x0f\x2c\x66\xcc\x2d\xdc\x53\x08\x5e\xc6\xc1\xc3\xef\xc1\xfc\xb6\x46\xde\x40\xbf\x9f\x41\x7b\x4d\x7a\xe5\x18\x8c\x5f\xa7\xf7\xc1\xc3\x7c\x3a\x0e\x1e\xe6\x37\xc3\xd9\xec\xce\x69\x19\x04\x87\x86\xd7\xea\x9f\x02\xed\x63\xf0\x14\x94\xd6\xfd\xef\x9b\xe1\xa0\x15\xc0\xee\x3f\xbc\x19\xfe\x38\x98\xcd\x6e\x9b\xd6\xdb\x22\xc8\x81\xa1\xf0\x32\xac\x49\x0a\xe1\x33\xac\xf0\xba\x2e\xca\xba\x48\x2a\x63\x17\x15\xb5\x03\x23\xcc\x42\x41\x53\xe9\x5e\x4d\x7d\x5e\x58\x65\xa6\x71\x20\x04\x6c\x0f\x37\x81\x4a\x4c\x54\x7f\x4b\x26\x42\x76\xda\xac\x09\x50\x26\x81\x32\x14\xa6\xdc\x4a\x99\x93\xae\xa5\x4e\x2c\xe5\x4e\x0c\x25\xef\x98\xc2\x01\xf4\xd2\x97\x8b\x15\x30\xfa\x02\x9a\x45\xef\x1d\x0b\x13\xa0\xf1\xa9\x41\x72\x71\x72\x88\x74\xcd\x59\xff\x85\xf1\x0c\x01\x7d\x81\x7f\xe4\x54\x60\xe4\x4f\xc8\x54\xb3\x01\xda\x45\x68\xd8\xe6\x86\x22\x49\x90\xe7\xd2\xc4\x19\xca\x24\xae\x50\xe8\x89\x2e\x30\xe3\xb9\x08\x5b\x94\xb8\x3c\xe3\xb2\x10\x62\x50\x89\x4e\xec\x85\x46\xcc\xc5\xe6\x02\xdd\x13\xba\x7b\x02\xb5\x87\xa1\x70\x14\x40\x1a\xe5\x6e\x66\x51\xce\xcf\xc7\xe0\x49\x39\x3f\xdf\xff\xec\x74\x31\xfc\x3f\x21\xce\x3b\xc0\x60\x79\xb2\x68\x32\xc1\x15\x96\xb2\x34\x97\x3f\xe5\xb1\xa4\x69\x4c\x5b\xaa\xd4\x2f\x41\xcb\xa6\x49\x69\xae\x8f\xfa\xb9\xa6\x4a\xea\x27\xd5\x0a\xb4\x9e\xcc\x3d\x47\x52\x7b\xca\x3d\x4b\x3d\x5b\xd4\x9d\x53\xd8\x8b\x12\x14\x4b\x08\x8d\x47\xd9\xc5\xaa\x2c\xe4\x49\x02\x2c\x3a\x55\x06\x4b\x22\xe8\x6a\xc0\x55\x72\xbd\x0a\xce\x55\x6e\xfe\x92\xc6\xe6\x4a\xb4\xcb\x06\xb1\x4b\x47\x97\xb9\x1c\x31\xa3\x6e\xf3\xaa\xbd\xac\x52\x42\x3a\xcb\x09\xe9\x2b\x29\xc4\x54\xff\x44\xa9\x8f\x0e\xc8\x16\x9c\xc7\x08\xcc\x06\x2d\xc2\x25\xe4\x71\x71\x5c\x49\x91\x63\x6f\x3c\x09\x46\x14\x7e\xd9\xa6\xd6\xb5\xec\x44\x87\xda\xd1\x4e\x0a\x25\x9a\xae\x58\x0e\x70\xf7\x9f\x4f\x25\xaf\x1d\x77\xbe\xd7\xfa\x96\x94\xec\x0d\x28\x05\x21\x29\xe8\x3a\xa7\x8b\xe2\xd1\xda\x0d\x28\x5d\xe7\x04\x79\x2b\x27\xed\x43\xf5\x50\xd0\xe7\xd7\x9d\x4f\x9b\x4c\xdb\xda\x92\xab\xfe\xa8\x19\xff\xb7\xfa\x53\x67\x3a\xcb\x2a\x21\xcb\x13\x0b\x85\x4b\x1f\x97\x7e\x91\x2e\x93\x26\xef\xff\x0d\xb0\x3a\xd5\xfd\x9b\xd5\xc7\xca\xce\xda\xc7\x25\x93\xba\x0a\x24\x97\x53\x01\xfb\x66\x9e\xa2\x11\x6a\x7b\x69\xed\xa2\x78\x2e\xaf\x6d\xd4\x31\x33\xea\x36\xaf\xda\xeb\x73\xca\xd8\x5b\xdb\xd2\x0b\xda\x11\x87\xf7\x1e\xf0\x05\x93\x7c\xba\x96\xe5\x5f\x3a\x23\x3e\x58\xac\xf6\x7b\x7b\xed\x69\xfe\xeb\x62\xf0\x8c\xdb\xcb\x56\xe8\xb5\x49\xb9\x64\x93\xf2\xc5\x75\xe8\x63\x9b\xa6\x84\xe7\xcc\xde\x33\x7d\x95\xf7\xc4\xe4\x3c\xef\x8a\x53\x90\xeb\xce\x48\x3a\x47\x4d\x78\x64\x99\x9f\x43\x43\x7c\xc1\xcd\x74\x13\x7f\x19\xc8\x66\x20\xf8\x7b\xcd\x14\x61\x8f\x3e\x16\x8f\x7f\x15\x5d\x2e\x70\xeb\x41\xeb\x4d\xb4\x95\xf5\x19\x4a\x49\x59\xeb\x23\x24\xf9\x8a\xbc\x3f\x03\xe7\x33\x0c\x05\xaa\x5f\xc8\x34\x38\xec\x92\xdc\xa1\x4f\x3d\x23\xb7\xfa\x32\xc8\xd3\xfd\x6e\x7e\x85\x40\x21\xb8\x38\xe3\x67\x6d\x2d\x8b\x7a\x30\xc8\xce\x1e\x3f\x34\x29\x8a\xf9\xcb\x66\x6b\xce\xfb\x01\x9a\x6b\x04\x4a\x2c\xbd\xde\xb5\x43\x99\x2f\x16\x1c\x19\x30\x04\x89\x2b\x2e\xf4\x0d\xa1\xbb\x40\x9a\x72\xb7\xe1\x0b\x9d\x87\x45\x7c\x0d\x43\x8a\xb0\x20\xe1\x54\x11\xb3\xd0\xbc\xda\x5d\xc3\x46\x79\xa6\x94\x0d\x5e\x7b\x4a\x4a\x7d\x32\x55\xa5\x9b\x97\x8f\xcc\xd7\x6f\x5a\x17\x50\x0c\x17\x4b\xf4\x57\x37\x34\x5f\xe6\xbd\xe6\x54\x0a\xe8\x25\xec\x36\xe4\x83\x0b\x63\x55\x9c\x72\x87\xbc\x62\xec\xce\xfb\x27\x00\x00\xff\xff\x0b\x94\xb7\x98\xd5\x26\x00\x00")

func schema100SeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedManifestSchemaJson,
		"schema/1.0.0/seed.manifest.schema.json",
	)
}

func schema100SeedManifestSchemaJson() (*asset, error) {
	bytes, err := schema100SeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.manifest.schema.json", size: 9941, mode: os.FileMode(438), modTime: time.Unix(1521125106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema100SeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\xe3\x36\x10\xbe\x07\xc8\x3b\x0c\x98\x1c\x9d\xa8\x68\x83\x16\xf5\x2d\x28\x90\xa2\x45\xbb\x09\x36\xc7\xc0\x07\x5a\x1e\xd9\x0c\x28\xd1\x21\x69\x24\xc6\x42\xef\xbe\x20\x25\x4a\xa4\x44\xd9\xf2\x3a\x6b\xf8\x26\x0d\xe7\xf7\xfb\x86\xe4\xf0\xdb\xe5\x05\x00\xb9\x56\xe9\x0a\x73\x4a\xa6\x40\x56\x5a\xaf\xa7\x49\xf2\xaa\x44\x71\x53\x49\x6f\x85\x5c\x26\x0b\x49\x33\x7d\xf3\xcb\x5d\x52\xc9\xae\xc8\xc4\x1a\xb2\x85\xb3\x51\xd3\x24\xd1\x42\x70\x75\xcb\x50\x67\xd6\x66\xa5\x73\x9e\xc8\x2c\xfd\xe3\xcf\xbb\xdf\x9d\x81\x66\x9a\xa3\xb1\xf9\x1b\x05\xfc\xfb\xfc\xf8\x05\xc4\xfc\x15\x53\x5d\x2f\x2f\x50\xa5\x92\xad\x35\x13\x85\x51\x7a\xb6\xc1\x20\x13\x12\x28\xc4\x2d\xf4\x76\x6d\xfd\x05\x42\x89\x6f\x1b\x26\xd1\x24\xf7\x52\xab\xc0\xac\x5a\x5a\x4b\xb1\x46\xa9\x19\x2a\x32\x05\x5b\x3d\x00\x99\xcf\xc5\x87\xf9\x05\x72\x2d\x31\xdb\x01\xc3\x12\x85\x11\x25\xc6\xe0\xd6\x7c\x5d\x11\x28\x8d\x93\xb2\xf2\x2e\x0a\x7c\x34\xf6\x2f\x95\x63\xcf\xe1\x55\xb2\xc0\x8c\x15\xcc\x94\xa6\x8c\x9f\x1c\xb5\xdc\x92\xda\x70\x84\xea\x5f\x82\x73\x4c\x2d\x32\xfb\x8d\x32\xa4\x7a\x23\x71\xbc\x66\xe0\xdd\x98\xcc\x1c\x21\x8d\xaa\x87\x57\x93\x7e\x23\x1a\x60\xc2\x2e\xf8\x6c\x38\xa1\xd3\x9f\x78\x82\x54\x08\xb9\x60\x05\xd5\xa8\x88\x13\xcf\x5a\x37\x1d\x6c\x6d\x55\xed\xa7\xdf\x5b\x4f\x82\x15\xda\x77\x0d\x40\xe8\x62\x61\xcb\xa0\xfc\xc9\xef\x80\x8c\x72\x85\xa1\x66\xac\x43\xc2\xa4\x7b\x62\x00\x82\xc5\x26\x0f\x93\x6b\x96\xaa\x74\xba\x0b\xb3\x50\x50\x4e\x3a\x91\x7c\x34\x62\x01\xe3\x74\xae\x85\xb2\x5f\x9d\x70\xa5\xff\xeb\xfd\xf8\x51\x07\xc0\xfc\x7f\xc3\x35\x3b\x33\x44\xbd\x9c\x4e\x0b\xeb\xbd\x94\x74\xfb\x79\xd8\xfe\xc7\x0a\x7c\xd6\x92\x15\xcb\xf3\xc1\xd6\xcb\xe9\x34\xd8\xf2\xa1\x80\xc7\x36\xed\x39\xa2\xdb\x4d\xec\xb3\x21\x76\x87\x30\xb5\x8d\x3a\xe9\xad\x33\x8d\x79\xd4\xf2\x70\x7a\x3a\x04\x1d\xc5\xd7\x93\xe0\xdb\xa5\x28\xce\x87\x27\x97\xd0\xa9\x8e\x97\x58\xb4\xe3\x0f\xed\x33\x03\x35\xc8\xea\xfc\x3b\x3f\xce\xca\xf8\xb6\x6f\x66\x98\xea\xc3\x55\x44\x22\x13\x5d\x30\x47\x79\x23\x72\x57\xaf\x9d\x86\x3a\x93\xf2\x3d\xa4\x8d\x16\x88\x0c\x5c\x8c\x7a\x58\x56\x03\xe3\x58\x93\x8c\x21\xd9\x1f\xb6\x86\xb8\x6f\x78\x6f\x89\x8e\x26\x0a\xb3\x80\x41\x3f\xcc\xb4\xdb\xb4\xc3\xc4\xb5\xa4\x8d\x18\xa4\x23\xc8\x97\x1d\xe4\xdd\x58\x1c\x85\xfb\xa1\x5e\xdc\x81\x71\xf3\x04\xa9\x1d\xc1\xce\x59\xd7\x9b\x93\x27\x01\xa2\x3f\x0c\xb4\x4b\x71\x00\xdd\x6d\x0f\xdb\xc8\xcc\x0c\xd5\x6b\xc0\xa1\x5e\x6c\x38\x27\xbd\xdd\x76\x18\xde\xc1\xe6\x2d\x77\x1d\x22\x4d\xdc\x97\xf6\x9d\xe0\x72\x98\x75\x4d\xed\xe3\x32\x30\x51\xf5\x6d\x6e\x4c\xf2\x39\x4a\x6b\xb4\x87\xec\x7d\xbb\xec\xa1\xa7\x76\x48\x03\xa4\x31\xb3\xb0\x09\x6a\xd5\xe3\x69\xdf\xb1\xbd\x9a\x18\x9f\xba\xb9\xda\x57\xe4\xfe\xbd\x65\x6a\x72\x6f\x8f\xb0\xa2\x1e\x88\x8a\x15\x4b\x8e\xd0\xa8\x4f\xfa\xe5\xf7\xf3\x25\x39\x2b\xfe\xa9\x13\xfe\x35\x90\xd3\x0f\x27\xff\xcd\x97\xbb\xea\x82\xd6\x1f\xb8\xc5\x5c\x3b\x05\x27\xf9\xe4\xe4\x86\xed\xcf\xcc\xaf\xa4\xbd\xb1\x5d\xa1\xf6\xb2\x6e\x88\xe8\x33\x50\x3d\x53\x76\xd3\x50\x80\xc5\xd8\x5c\x16\xce\x4c\x8d\xa4\x22\x7a\x95\x8e\x7f\x90\x96\x91\xcc\xbd\x29\x73\x74\xda\xfa\x5d\x80\x90\x90\x0b\x89\x03\x25\x50\xce\xfb\xc7\x5f\x97\x91\x43\x5f\x7c\xbb\xf9\xf5\xdb\x74\x88\xdc\x81\xfa\xa9\xfc\x7a\x50\xfd\x99\xd8\xc8\xb6\x70\x78\x5f\xa1\x44\xd0\x2b\x84\x8c\x49\xa5\x01\xdf\x36\x94\x2b\x2b\xe0\x54\xe9\x33\x02\xe6\xee\x00\x60\xdc\x10\x36\x1a\x95\x0a\x49\x30\xad\xf4\x33\xfa\xd9\x23\x6a\xe8\x50\x2c\x2f\x2f\xca\xef\x01\x00\x00\xff\xff\xca\x61\x87\x47\x58\x15\x00\x00")

func schema100SeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema100SeedMetadataSchemaJson,
		"schema/1.0.0/seed.metadata.schema.json",
	)
}

func schema100SeedMetadataSchemaJson() (*asset, error) {
	bytes, err := schema100SeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/1.0.0/seed.metadata.schema.json", size: 5464, mode: os.FileMode(438), modTime: time.Unix(1523455155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/1.0.0/seed.manifest.example.json": schema100SeedManifestExampleJson,
	"schema/1.0.0/seed.manifest.schema.json": schema100SeedManifestSchemaJson,
	"schema/1.0.0/seed.metadata.schema.json": schema100SeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"1.0.0": &bintree{nil, map[string]*bintree{
			"seed.manifest.example.json": &bintree{schema100SeedManifestExampleJson, map[string]*bintree{}},
			"seed.manifest.schema.json": &bintree{schema100SeedManifestSchemaJson, map[string]*bintree{}},
			"seed.metadata.schema.json": &bintree{schema100SeedMetadataSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

